{"version":3,"sources":["../src/is-array-x.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,WAAP,MAAwB,iBAAxB;AAEA,IAAM,aAAa,GAAG,GAAG,OAAzB;AACA,IAAM,aAAa,GAAG,OAAO,aAAP,KAAyB,UAAzB,IAAuC,aAA7D;AAEA,IAAM,OAAO,GACX,aAAa,IACb,OAAO,CAAC,YAAM;AAAA;;AACZ,SAAO,aAAa,CAAC,EAAD,CAAb,KAAsB,IAAtB,IAA8B,aAAa,CAAC;AAAC,IAAA,MAAM,EAAE;AAAT,GAAD,CAAb,KAA+B,KAApE;AACD,CAFM,YAFT;;AAMA,IAAM,SAAS,GAAI,SAAS,IAAT,GAAgB;AACjC,MAAI,OAAO,IAAI,OAAO,CAAC,KAAR,KAAkB,KAA7B,IAAsC,OAAO,CAAC,KAAR,KAAkB,IAA5D,EAAkE;AAChE,WAAO,aAAP;AACD;AAED;;;;;;;;;AAOA,SAAO,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AAC7B,WAAO,WAAW,CAAC,KAAD,CAAX,KAAuB,gBAA9B;AACD,GAFD;AAGD,CAfiB,EAAlB;;AAiBA,eAAe,SAAf","file":"is-array-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport toStringTag from 'to-string-tag-x';\n\nconst nativeIsArray = [].isArray;\nconst isArrayNative = typeof nativeIsArray === 'function' && nativeIsArray;\n\nconst testRes =\n  isArrayNative &&\n  attempt(() => {\n    return isArrayNative([]) === true && isArrayNative({length: 0}) === false;\n  });\n\nconst isArrayFn = (function iife() {\n  if (testRes && testRes.threw === false && testRes.value === true) {\n    return isArrayNative;\n  }\n\n  /**\n   * The isArray() function determines whether the passed value is an Array.\n   *\n   * @function isArray\n   * @param {*} [value] - The object to be checked..\n   * @returns {boolean} `true` if the object is an Array; otherwise, `false`.\n   */\n  return function isArray(value) {\n    return toStringTag(value) === '[object Array]';\n  };\n})();\n\nexport default isArrayFn;\n"]}