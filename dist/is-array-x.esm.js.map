{"version":3,"sources":["../src/is-array-x.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,WAAP,MAAwB,iBAAxB;AAEA,IAAM,GAAG,GAAG,GAAG,OAAf;AACA,IAAM,aAAa,GAAG,OAAO,GAAP,KAAe,UAAf,IAA6B,GAAnD;AAEA,IAAM,UAAU,GAAG,OAAO,CAAC,SAAS,SAAT,GAAqB;AAC9C,SAAO,aAAa,CAAC,EAAD,CAAb,KAAsB,IAAtB,IAA8B,aAAa,CAAC;AAAC,IAAA,MAAM,EAAE;AAAT,GAAD,CAAb,KAA+B,KAApE;AACD,CAFyB,CAA1B;AAIA,IAAM,SAAS,GAAG,UAAU,CAAC,KAAX,KAAqB,KAArB,IAA8B,UAAU,CAAC,KAAX,KAAqB,IAArE;AAEA,OAAO,IAAM,cAAc,GAAG,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AACpD,SAAO,WAAW,CAAC,KAAD,CAAX,KAAuB,gBAA9B;AACD,CAFM;AAIP;;;;;;;AAMA,IAAM,OAAO,GAAG,SAAS,GAAG,aAAH,GAAmB,cAA5C;AAEA,eAAe,OAAf","file":"is-array-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport toStringTag from 'to-string-tag-x';\n\nconst nia = [].isArray;\nconst nativeIsArray = typeof nia === 'function' && nia;\n\nconst testResult = attempt(function attemptee() {\n  return nativeIsArray([]) === true && nativeIsArray({length: 0}) === false;\n});\n\nconst isWorking = testResult.threw === false && testResult.value === true;\n\nexport const implementation = function isArray(value) {\n  return toStringTag(value) === '[object Array]';\n};\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to test.\n * @returns {boolean} - True if an array; otherwise false.\n */\nconst isArray = isWorking ? nativeIsArray : implementation;\n\nexport default isArray;\n"]}